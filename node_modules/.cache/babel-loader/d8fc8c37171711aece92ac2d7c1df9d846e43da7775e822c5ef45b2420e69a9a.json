{"ast":null,"code":"var _jsxFileName = \"/root/nest_js/frontend/src/GoogleLoginButton.js\";\nimport React from \"react\";\nimport { GoogleOAuthProvider, GoogleLogin } from \"@react-oauth/google\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleLoginButton = () => {\n  const onSuccess = response => {\n    console.log(\"Login Success:\", response.credential);\n    // 서버에 액세스 토큰을 전송하여 인증을 처리합니다.\n    fetch(\"http://localhost:3000/auth/google/callback\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        token: response.credential\n      })\n    }).then(res => res.json()).then(data => {\n      console.log(\"Server response:\", data);\n    }).catch(error => {\n      console.error(\"Error:\", error);\n    });\n  };\n  const onFailure = response => {\n    console.error(\"Login Failed:\", response);\n  };\n  return /*#__PURE__*/_jsxDEV(GoogleOAuthProvider, {\n    clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n    children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n      onSuccess: onSuccess,\n      onError: onFailure\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_c = GoogleLoginButton;\nexport default GoogleLoginButton;\nvar _c;\n$RefreshReg$(_c, \"GoogleLoginButton\");","map":{"version":3,"names":["React","GoogleOAuthProvider","GoogleLogin","jsxDEV","_jsxDEV","GoogleLoginButton","onSuccess","response","console","log","credential","fetch","method","headers","body","JSON","stringify","token","then","res","json","data","catch","error","onFailure","clientId","process","env","REACT_APP_GOOGLE_CLIENT_ID","children","onError","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/root/nest_js/frontend/src/GoogleLoginButton.js"],"sourcesContent":["import React from \"react\";\nimport { GoogleOAuthProvider, GoogleLogin } from \"@react-oauth/google\";\n\nconst GoogleLoginButton = () => {\n  const onSuccess = (response) => {\n    console.log(\"Login Success:\", response.credential);\n    // 서버에 액세스 토큰을 전송하여 인증을 처리합니다.\n    fetch(\"http://localhost:3000/auth/google/callback\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ token: response.credential }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(\"Server response:\", data);\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n      });\n  };\n\n  const onFailure = (response) => {\n    console.error(\"Login Failed:\", response);\n  };\n\n  return (\n    <GoogleOAuthProvider clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}>\n      <GoogleLogin onSuccess={onSuccess} onError={onFailure} />\n    </GoogleOAuthProvider>\n  );\n};\n\nexport default GoogleLoginButton;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,mBAAmB,EAAEC,WAAW,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvE,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAC9B,MAAMC,SAAS,GAAIC,QAAQ,IAAK;IAC9BC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,QAAQ,CAACG,UAAU,CAAC;IAClD;IACAC,KAAK,CAAC,4CAA4C,EAAE;MAClDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,KAAK,EAAEV,QAAQ,CAACG;MAAW,CAAC;IACrD,CAAC,CAAC,CACCQ,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACdb,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEY,IAAI,CAAC;IACvC,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBf,OAAO,CAACe,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC,CAAC,CAAC;EACN,CAAC;EAED,MAAMC,SAAS,GAAIjB,QAAQ,IAAK;IAC9BC,OAAO,CAACe,KAAK,CAAC,eAAe,EAAEhB,QAAQ,CAAC;EAC1C,CAAC;EAED,oBACEH,OAAA,CAACH,mBAAmB;IAACwB,QAAQ,EAAEC,OAAO,CAACC,GAAG,CAACC,0BAA2B;IAAAC,QAAA,eACpEzB,OAAA,CAACF,WAAW;MAACI,SAAS,EAAEA,SAAU;MAACwB,OAAO,EAAEN;IAAU;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAE1B,CAAC;AAACC,EAAA,GA7BI9B,iBAAiB;AA+BvB,eAAeA,iBAAiB;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}